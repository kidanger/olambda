#!/usr/bin/env octave-cli

% this is necessary when running 'pkg load images;' from the octaverc
clear -v ans;

if exist('iio_read') ~= 3 || exist('iio_write') ~= 3
    fprintf(2, 'olambda fatal error: could not find ''iio_read'' and/or ''iio_write''.\n');
    fprintf(2, 'Please check your installation of iio''s octave bindings.\n');
    fprintf(2, '(you should download https://github.com/mnhrdt/iio/tree/master/contrib/octave and add the mex files to your octave path using ''$HOME/.octaverc''.)\n');
    exit(1);
end

arg_list = argv();
argc = nargin;

% parse '-p' to print the output in the terminal instead of writing to file
print = false;
for i=1:argc
    if strcmp(arg_list{i}, '-p')
        print = true;
        arg_list(i, :) = [];
        argc = argc - 1;
        break;
    end
end

% parse '-h' to print the usage
showhelp = false;
for i=1:argc
    if strcmp(arg_list{i}, '-h')
        showhelp = true;
        arg_list(i, :) = [];
        argc = argc - 1;
        break;
    end
end

% parse '-v' for verbose mode
verbose = false;
for i=1:argc
    if strcmp(arg_list{i}, '-v')
        verbose = true;
        arg_list(i, :) = [];
        argc = argc - 1;
        break;
    end
end

% parse '-o' for the output filename
output = '-';
for i=1:argc
    if strcmp(arg_list{i}, '-o') ~= 0
        output = arg_list{i+1};
        arg_list(i:i+1, :) = [];
        argc = argc - 2;
        break;
    end
end

% display usage if needed or asked
if argc == 0 || showhelp
    fprintf(2, 'usage: olambda [-h] [-v] [-p] [-o <output>] [<images>...] <statements;expression>\n');
    return;
end

% parse the octave code
prog = arg_list{argc};
arg_list(argc, :) = [];
argc = argc - 1;

% read the images or matrices stored in text files
imgs = {};
imgs_names = ['x':'z', 'a':'w']; % we do not handle more than 26 input images
for i=1:argc
    [fpath, fname, fext] = fileparts(arg_list{i});
    switch fext
        case {'.txt', '.mat'}
            imgs{i} = load(arg_list{i});
        otherwise
            imgs{i} = iio_read(arg_list{i});
    end
    if verbose && i <= 26
        fprintf(2, ['%c=''%s'' (%d' ...
                    repmat('x%d', [1, length(size(imgs{i}))-1]) ')\n'], ...
            imgs_names(i), arg_list{i}, size(imgs{i}));
    end
end

preprog = '';
for i=1:min(26, argc)
    preprog = [preprog imgs_names(i) '=imgs{' int2str(i) '};'];
end
prog = regexprep([prog ';'], '(\s|;)*$', ';');

% run the code on the image
eval([preprog prog]);

% ans is not defined in two cases:
% 1. All results are assigned to a variable --> assign last assigned one to res
% 2. The statement is a variable name --> assign this variable to res
if ~exist('ans','var')
    prg = prog;
    prg(regexp(prg, ' ')) = [];  % remove all whitespaces
    prg = [';' prg];             % add leading semicolon
    [~,~,~,match] = regexp(prg, ';[a-zA-Z][a-zA-Z0-9]*;+$');
    if isempty(match)
        % last statement is not a variable name, so use last assignment
        [~,~,~,match] = regexp(prg, ';[a-zA-Z][a-zA-Z0-9]*=');
    end
    if isempty(match) || ~exist(match{end}(2:end-1), 'var')
        if verbose
            fprintf(2,'Could not identify the output variable.\n');
        end
        return
    end
    lastvar = match{end}(2:end-1);
    if verbose
        fprintf(2,'lastvar: %c\n', lastvar);
    end
    eval(['res=' lastvar ';']);
else
    res = ans;
end

if verbose
    fprintf(2, 'running ''%s''\n', prog);
    fprintf(2, ['result: %d' repmat('x%d', [1, length(size(res))-1]) ' %s\n'],
        size(res), class(res));
end

% print or save the result
if strcmp(output,'-') && (print || ischar(res) || numel(res) == 1)
    disp(res);
else
    [fpath, fname, fext] = fileparts(output);
    switch fext
        case {'.txt', '.mat'}
            save('-ascii', output, 'res');
        otherwise
            iio_write(output, res);
    end
    if verbose
        fprintf(2, ['result saved to: ' output '\n']);
    end
end

% vim: ft=octave
